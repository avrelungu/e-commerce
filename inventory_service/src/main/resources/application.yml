spring:
  application:
    name: inventory-service

  docker:
    compose:
      enabled: false

  sql:
    init:
      mode: never

  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5433/inventory_service
    username: myuser
    password: secret

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: none

  kafka:
    bootstrap-servers: localhost:9092
    
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all

    consumer:
      group-id: inventory-service-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"

  data:
    redis:
      port: 6379
      host: localhost
      timeout: 2000ms

kafka:
  topics:
    order-created: "order-created"
    stock-reserved: "inventory-stock-reserved"
    stock-released: "inventory-stock-released"
    out-of-stock: "inventory-out-of-stock"
    payment-processed: "payment-processed"
    payment-failed: "payment-failed"

server:
  port: 8082

# Resilience4j Configuration
resilience4j:
  retry:
    instances:
      inventory-stock-reservation:
        max-attempts: 3
        wait-duration:
          seconds: 1

management:
  endpoints:
    web:
      exposure:
        include: "*"

  endpoint:
    health:
      show-details: always