version: "3.8"

services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"

  postgres-order:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: order_service
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: secret
      
  postgres-inventory:
    image: postgres:15-alpine
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: inventory_service
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: secret

  postgres-payment:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=payment_service'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    ports:
      - '5434:5432'

  postgres-shipping:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=shipping_service'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    ports:
      - '5435:5432'

  postgres-notifications:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=notification_service'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    ports:
      - '5436:5432'

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: schema-registry
    depends_on:
      - kafka
    ports:
      - "8090:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  # Application Services
  api-gateway:
    build: ./api-gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_REDIS_HOST: redis
    depends_on:
      - redis
      - order-service
      - inventory-service
      - payment-service
      - shipping-service
      - notification-service
    networks:
      - ecommerce-network
      
  order-service:
    build: ./order_service
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-order:5432/order_service
      SPRING_DATASOURCE_USERNAME: myuser
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATA_REDIS_HOST: redis
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on:
      - postgres-order
      - kafka
      - redis
      - schema-registry
    networks:
      - ecommerce-network
      
  inventory-service:
    build: ./inventory_service
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-inventory:5432/inventory_service
      SPRING_DATASOURCE_USERNAME: myuser
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATA_REDIS_HOST: redis
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on:
      - postgres-inventory
      - kafka
      - redis
      - schema-registry
    networks:
      - ecommerce-network
      
  payment-service:
    build: ./payment-service
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-payment:5432/payment_service
      SPRING_DATASOURCE_USERNAME: myuser
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATA_REDIS_HOST: redis
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on:
      - postgres-payment
      - kafka
      - redis
      - schema-registry
    networks:
      - ecommerce-network
      
  shipping-service:
    build: ./shipping-service
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-shipping:5432/shipping_service
      SPRING_DATASOURCE_USERNAME: myuser
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATA_REDIS_HOST: redis
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on:
      - postgres-shipping
      - kafka
      - redis
      - schema-registry
    networks:
      - ecommerce-network
      
  notification-service:
    build: ./notification-service
    ports:
      - "8085:8085"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-notifications:5432/notification_service
      SPRING_DATASOURCE_USERNAME: myuser
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATA_REDIS_HOST: redis
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on:
      - postgres-notifications
      - kafka
      - redis
      - schema-registry
    networks:
      - ecommerce-network

networks:
  ecommerce-network:
    driver: bridge
