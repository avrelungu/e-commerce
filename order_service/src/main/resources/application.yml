spring:
  application:
    name: order-service

  docker:
    compose:
      enabled: false

  sql:
    init:
      mode: never

  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/order_service
    username: myuser
    password: secret

  data:
    redis:
      port: 6379
      host: localhost
      timeout: 2000ms

  kafka:
    bootstrap-servers: localhost:9092
    
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      acks: all
      retries: 3
      properties:
        retry.backoff.ms: 1000
        schema.registry.url: http://localhost:8090

    consumer:
      group-id: order-service-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        schema.registry.url: http://localhost:8090
        specific.avro.reader: true

server:
  port: 8081

kafka:
  topics:
    order-created: "order-created"
    stock-reserved: "inventory-stock-reserved"
    stock-released: "inventory-stock-released"
    out-of-stock: "inventory-out-of-stock"
    payment-request: "payment-request"
    payment-processed: "payment-processed"
    payment-failed: "payment-failed"
    order-shipped: "shipping-order-shipped"
    order-delivered: "shipping-order-delivered"
    shipment-tracking-update: "shipping-tracking-update"

inventory_service:
  products:
    tax-rate: 0.21

# Resilience4j Configuration
resilience4j:
  retry:
    instances:
      order-save:
        max-attempts: 3
        wait-duration:
          seconds: 1

management:
  endpoints:
    web:
      exposure:
        include: "*"

  endpoint:
    health:
      show-details: always

---
spring:
  config:
    activate:
      on-profile: docker

  sql:
    init:
      mode: always

  datasource:
    url: jdbc:postgresql://postgres-order:5432/order_service
    username: myuser
    password: secret

  data:
    redis:
      host: redis

  kafka:
    bootstrap-servers: kafka:29092
    producer:
      properties:
        schema.registry.url: http://schema-registry:8081
    consumer:
      properties:
        schema.registry.url: http://schema-registry:8081