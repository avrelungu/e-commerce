spring:
  application:
    name: order-service-test
    
  sql:
    init:
      mode: never
      
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password: 

  h2:
    console:
      enabled: true
      
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        
  data:
    redis:
      port: 6379
      host: localhost
      timeout: 2000ms
      
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: order-service-test-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

# Test-specific logging
logging:
  level:
    com.example.order_service: DEBUG
    org.springframework.test: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

# Test-specific kafka topics
kafka:
  topics:
    order-created: "test-order-created"
    stock-reserved: "test-inventory-stock-reserved"
    stock-released: "test-inventory-stock-released"
    out-of-stock: "test-inventory-out-of-stock"
    payment-request: "test-payment-request"
    payment-processed: "test-payment-processed"
    payment-failed: "test-payment-failed"
    order-shipped: "test-shipping-order-shipped"
    order-delivered: "test-shipping-order-delivered"
    shipment-tracking-update: "test-shipping-tracking-update"

management:
  endpoints:
    web:
      exposure:
        include: "health,info"