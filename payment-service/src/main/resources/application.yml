spring:
  application:
    name: payment-service

  docker:
    compose:
      enabled: false

  sql:
    init:
      mode: never

  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5434/payment_service
    username: myuser
    password: secret

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: none

  kafka:
    bootstrap-servers: localhost:9092

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      acks: all
      retries: 3
      properties:
        retry.backoff.ms: 1000
        schema.registry.url: http://localhost:8090

    consumer:
      group-id: payment-service-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        schema.registry.url: http://localhost:8090
        specific.avro.reader: true

  data:
    redis:
      port: 6379
      host: localhost
      timeout: 2000ms

kafka:
  topics:
    order-created: "order-created"
    stock-reserved: "inventory-stock-reserved"
    stock-released: "inventory-stock-released"
    out-of-stock: "inventory-out-of-stock"
    payment-request: "payment-request"
    payment-processed: "payment-processed"
    payment-failed: "payment-failed"
    stock-confirmation-failed: "stock-confirmation-failed"
    refund-processed: "refund-processed"
    refund-failed: "refund-failed"

  retry:
    max: 3

server:
  port: 8083

resilience4j:
  retry:
    instances:
      payment-processing:
        max-attempts: 3
        wait-duration:
          seconds: 1
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - org.springframework.dao.CannotAcquireLockException
          - org.springframework.dao.DeadlockLoserDataAccessException
          - org.springframework.dao.OptimisticLockingFailureException
          - org.hibernate.StaleStateException
          - org.springframework.orm.ObjectOptimisticLockingFailureException
          - org.springframework.dao.DataAccessResourceFailureException
          - org.springframework.dao.TransientDataAccessResourceException
        ignore-exceptions:
          - java.lang.IllegalArgumentException
          - java.lang.IllegalStateException
      
      refund-processing:
        max-attempts: 3
        wait-duration:
          seconds: 1
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - java.lang.RuntimeException
          - java.lang.Exception
        ignore-exceptions:
          - java.lang.IllegalArgumentException

  circuitbreaker:
    instances:
      payment-processing:
        sliding-window-size: 10
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        minimum-number-of-calls: 5
        
      refund-processing:
        sliding-window-size: 10
        failure-rate-threshold: 60
        wait-duration-in-open-state: 30s
        minimum-number-of-calls: 5

---
spring:
  config:
    activate:
      on-profile: docker

  sql:
    init:
      mode: always

  datasource:
    url: jdbc:postgresql://postgres-payment:5432/payment_service
    username: myuser
    password: secret

  data:
    redis:
      host: redis

  kafka:
    bootstrap-servers: kafka:29092
    producer:
      properties:
        schema.registry.url: http://schema-registry:8081
    consumer:
      properties:
        schema.registry.url: http://schema-registry:8081
